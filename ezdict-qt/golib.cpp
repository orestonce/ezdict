#include "golib.h"
/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void Go2cppFn_EventCancel(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_QueryWords(char* in, int inLen, char** out, int* outLen);

#ifdef __cplusplus
}
#endif


void EventCancel(){
	std::string in;
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_EventCancel((char *)in.data(), in.length(), &out, &outLen);
	if (out != NULL) {
		free(out);
	}
}

QueryWords_Resp QueryWords(std::string in0){
	std::string in;
	{
		uint32_t tmp11 = in0.length();
		char tmp12[4];
		tmp12[0] = (uint32_t(tmp11) >> 24) & 0xFF;
		tmp12[1] = (uint32_t(tmp11) >> 16) & 0xFF;
		tmp12[2] = (uint32_t(tmp11) >> 8) & 0xFF;
		tmp12[3] = (uint32_t(tmp11) >> 0) & 0xFF;
		in.append(tmp12, 4);
		in.append(in0);
	}
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_QueryWords((char *)in.data(), in.length(), &out, &outLen);
	QueryWords_Resp retValue;
	int outIdx = 0;
	{
		retValue.Skipped = (bool) out[outIdx];
		outIdx++;
		{
			uint32_t tmp13 = 0;
			uint32_t tmp14 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp15 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp16 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp17 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			tmp13 = tmp14 | tmp15 | tmp16 | tmp17;
			outIdx+=4;
			retValue.ErrMsg = std::string(out+outIdx, out+outIdx+tmp13);
			outIdx+=tmp13;
		}
		{
			{
				{
					uint32_t tmp18 = 0;
					uint32_t tmp19 = uint32_t(uint8_t(out[outIdx+0]) << 24);
					uint32_t tmp20 = uint32_t(uint8_t(out[outIdx+1]) << 16);
					uint32_t tmp21 = uint32_t(uint8_t(out[outIdx+2]) << 8);
					uint32_t tmp22 = uint32_t(uint8_t(out[outIdx+3]) << 0);
					tmp18 = tmp19 | tmp20 | tmp21 | tmp22;
					outIdx+=4;
					retValue.Info.XMLName.Space = std::string(out+outIdx, out+outIdx+tmp18);
					outIdx+=tmp18;
				}
				{
					uint32_t tmp23 = 0;
					uint32_t tmp24 = uint32_t(uint8_t(out[outIdx+0]) << 24);
					uint32_t tmp25 = uint32_t(uint8_t(out[outIdx+1]) << 16);
					uint32_t tmp26 = uint32_t(uint8_t(out[outIdx+2]) << 8);
					uint32_t tmp27 = uint32_t(uint8_t(out[outIdx+3]) << 0);
					tmp23 = tmp24 | tmp25 | tmp26 | tmp27;
					outIdx+=4;
					retValue.Info.XMLName.Local = std::string(out+outIdx, out+outIdx+tmp23);
					outIdx+=tmp23;
				}
			}
			{
				uint32_t tmp28 = 0;
				uint32_t tmp29 = uint32_t(uint8_t(out[outIdx+0]) << 24);
				uint32_t tmp30 = uint32_t(uint8_t(out[outIdx+1]) << 16);
				uint32_t tmp31 = uint32_t(uint8_t(out[outIdx+2]) << 8);
				uint32_t tmp32 = uint32_t(uint8_t(out[outIdx+3]) << 0);
				tmp28 = tmp29 | tmp30 | tmp31 | tmp32;
				outIdx+=4;
				retValue.Info.DictcnSpeach = std::string(out+outIdx, out+outIdx+tmp28);
				outIdx+=tmp28;
			}
			{
				uint32_t tmp33 = 0;
				uint32_t tmp34 = uint32_t(uint8_t(out[outIdx+0]) << 24);
				uint32_t tmp35 = uint32_t(uint8_t(out[outIdx+1]) << 16);
				uint32_t tmp36 = uint32_t(uint8_t(out[outIdx+2]) << 8);
				uint32_t tmp37 = uint32_t(uint8_t(out[outIdx+3]) << 0);
				tmp33 = tmp34 | tmp35 | tmp36 | tmp37;
				outIdx+=4;
				retValue.Info.TransType = std::string(out+outIdx, out+outIdx+tmp33);
				outIdx+=tmp33;
			}
			{
				uint32_t tmp38 = 0;
				uint32_t tmp39 = uint32_t(uint8_t(out[outIdx+0]) << 24);
				uint32_t tmp40 = uint32_t(uint8_t(out[outIdx+1]) << 16);
				uint32_t tmp41 = uint32_t(uint8_t(out[outIdx+2]) << 8);
				uint32_t tmp42 = uint32_t(uint8_t(out[outIdx+3]) << 0);
				tmp38 = tmp39 | tmp40 | tmp41 | tmp42;
				outIdx+=4;
				retValue.Info.Content = std::string(out+outIdx, out+outIdx+tmp38);
				outIdx+=tmp38;
			}
		}
	}
	if (out != NULL) {
		free(out);
	}
	return retValue;
}



// Qt:
#include <QMutexLocker>
#include <QtConcurrent/QtConcurrent>

RunOnUiThread::RunOnUiThread(QObject *parent) : QObject(parent), m_done(false)
{
    // 用signal里的Qt::QueuedConnection 将多线程里面的函数转化到ui线程里调用
    connect(this, SIGNAL(signal_newFn()), this, SLOT(slot_newFn()), Qt::QueuedConnection);
}

RunOnUiThread::~RunOnUiThread()
{
    {
        QMutexLocker lk(&this->m_Mutex);
        this->m_done = true;
        this->m_funcList.clear();
    }
    this->m_pool.clear();
    this->m_pool.waitForDone();
}

void RunOnUiThread::AddRunFnOn_OtherThread(std::function<void ()> fn)
{
    QMutexLocker lk(&this->m_Mutex);
    if (this->m_done) {
        return;
    }
    QtConcurrent::run(&this->m_pool, fn);
}

void RunOnUiThread::slot_newFn()
{
    QVector<std::function<void ()>> fn_vector;
    {
        QMutexLocker lk(&this->m_Mutex);
        if (this->m_funcList.empty() || this->m_done) {
            return;
        }
        fn_vector.swap(this->m_funcList);
    }

    for(std::function<void ()>& fn : fn_vector)
    {
        bool v_done = false;
        {
            QMutexLocker lk(&this->m_Mutex);
            v_done = this->m_done;
        }
        if (v_done) { // 快速结束
            return;
        }
        fn();
    }
}

void RunOnUiThread::AddRunFnOn_UiThread(std::function<void ()> fn)
{
    {
        QMutexLocker lk(&this->m_Mutex);
        if (this->m_done) {
            return;
        }
        m_funcList.push_back(fn);
    }
    emit this->signal_newFn();
}
